#!/usr/bin/env python
'''
  2017 wookieware.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.


__author__ = "@netwookie"
__copyright__ = "2017, wookieware.."
__credits__ = ["Rick Kauffman"]
__license__ = "Apache2"
__version__ = "1.0.0"
__maintainer__ = "Rick Kauffman"
__email__ = "rick@rickkauffman.com"
__status__ = "Prototype"

Functions to interact with Sevice Now and snowBridge local database
03212017 Initial release.


'''

import time
from flask import Flask, request, render_template, redirect, url_for, flash, session, send_file
from flask.ext.bootstrap import Bootstrap
from flask_sqlalchemy import SQLAlchemy
from models import db, Imc_alarm_ids, Elogfile
import json
import requests
from datetime import datetime
from pyhpeimc.auth import *
from pyhpeimc.plat.alarms import *

#
# Get record by number from snow

def get_snow(snow_url, snow_user, snow_passwd):
    """
    function takes the IMC-XXXX incident number and gets record from Snow
    :param snow_url: The URL for the Service Now instance with a single record number
    :param snow_user: Username for the Service Now instance
    :param snow_pass: Password for the Service Now instance
    :return:dictionary fields from Service Now
    :rtype: dict
    >>> from snowbridge import *
    >>> snowObject = get_snow(https://'devXXXXX.service-now.com/api/now/table/incident?IMC0000-31','admin','admin')
    >>> assert snowObject['number'] in snowObject
    """
    # Set proper headers
    headers = {"Accept":"application/json"}

    # Do the HTTP request
    response = requests.get(snow_url, auth=(snow_user, snow_passwd), headers=headers )

    # Check for HTTP codes other than 200
    if response.status_code != 200:
        e_time = str(datetime.now()).replace(' ','')
        e_msg = 'Failed to read record from Service Now return code: '+str(response.status_code)
        record = Elogfile(e_time,e_msg)
        db.session.add(record)
        db.session.commit()
        #return render_template('comm_error_snow.html', vars = e_msg)
        print e_msg
    # Decode the JSON response into a dictionary and use the data
    data = json.loads(response.text)
    return data

def post_snow(alarm, snow_url, snow_user, snow_passwd):
    """
    function takes alarm which is a python list and builds record for new snow incident
    :param alarm: a python list
    :param snow_url: A URL for the service now table
    :param snow_user: A str for the Service Now instance
    :param snow_passwd: A str for the Service Now instance
    :return: response.status_code for Service Now
    :rtype: int or string value of the return code
    >>> from snowbridge import *
    >>> snowObject = post_snow({alarm},'https://'devXXXXX.service-now.com/api/now/table/incident','admin','admin')
    >>> assert response.status_code == 201
    """
    data = {}           # A dictionary to build post information
    varz = []           # A list for errors

    # Build dictionary for Service Now incedent report
    priority = alarm['severity']
    short_description = "Generated by HPE IMC Alarm ID %s Host IP:%s" % (alarm['id'],alarm['deviceDisplay'])
    description = alarm['faultDesc']
    # Now we have to ensure the strings are not unicode, service now will return 400 if they are
    priority = priority.encode('utf-8')
    short_description = short_description.encode('utf-8')
    description = description.encode('utf-8')

    data['priority'] = priority
    data['number'] = "IMC0000-"+str(alarm['id'])
    varz = [data['number']]
    data['short_description'] = short_description
    data['description'] = description
    data = str(data)
    headers = {"Content-Type":"application/json","Accept":"application/json"}
    # Do the HTTP POST to Snow
    response = requests.post(snow_url, auth=(snow_user, snow_passwd), headers=headers ,data=data)
    if response.status_code != 201:
        e_time = str(datetime.now()).replace(' ','')
        e_msg = 'Failed to write record from Service Now return code: '+str(response.status_code)
        record = Elogfile(e_time,e_msg)
        db.session.add(record)
        db.session.commit()
        #return render_template('comm_error_snow.html', vars = e_msg)
        print e_msg

    varz.append(response.status_code)
    return varz

def ack_snow(update, snow_url, snow_user, snow_passwd):
    """
    function takes alarm which is a python dict and acknowlegeds an existing snow incident
    HTTP PUT
    :param alarm: a python dict. state = 1 New, state = 2 In progress/Acknowledged, state = 7 Closed
    :param snow_url: A URL for the service now table
    :param snow_user: A str for the Service Now instance
    :param snow_passwd: A str for the Service Now instance
    :return: response.status_code for Service Now
    :rtype: int or string value of the return code
    >>> from snowbridge import *
    >>> snowObject = put_snow({alarm},'https://'devXXXXX.service-now.com/api/now/table/incident','admin','admin')
    >>> assert response.status_code == 201
    """
    data = {}
    varz = []
    state = update['state']
    # Now we have to ensure the strings are not unicode, service now will return 400 if they are
    state = state.encode('utf-8')
    data['state'] = state
    data = str(data)
    headers = {"Content-Type":"application/json","Accept":"application/json"}
    # Do the HTTP POST to Snow
    response = requests.put(snow_url, auth=(snow_user, snow_passwd), headers=headers ,data=data)
    if response.status_code != 200:
        e_time = str(datetime.now()).replace(' ','')
        e_msg = 'Failed to update record from Service Now return code: '+str(response.status_code)
        record = Elogfile(e_time,e_msg)
        db.session.add(record)
        db.session.commit()
        #return render_template('comm_error_snow.html', vars = error_msg)
        print e_msg


    return response.status_code


def write_local_db(alarm, snow_return, snow_number):
    """
    function takes a mix a variables from snow and IMC to create a local SQL Alchemy db record
    :param alarm: a python dict
    :param snow_return: the return_code from performing a snow post
    >>> from snowbridge import *
    >>> write_local_db({alarm}, snow_return)
    >>> assert 'alarm['id']
    """
    check = Imc_alarm_ids.query.filter_by(alarm_id=alarm['id']).all()
    if check:
        #flash('Database Error...duplicate records', 'error')
        e_time = str(datetime.now()).replace(' ','')
        e_msg = 'Duplicate alarm ID when writing to local database'
        record = Elogfile(e_time,e_msg)
        db.session.add(record)
        db.session.commit()
        #return render_template('comm_error_db.html', vars = error_msg)
        print e_msg
    else:
        logfile = Imc_alarm_ids(alarm['id'],snow_return,alarm['faultDesc'],alarm['deviceDisplay'],
        alarm['severity'],alarm['faultTime'],alarm['userAckUserName'], alarm['userAckType'], snow_number)
        db.session.add(logfile)
        db.session.commit()

def update_local_db(alarm):
    """
    function selects a record by alarm_id and updates the records information
    :param alarm: A python dict
    >>> from snowbridge import *
    >>> update_local_db({alarm})
    >>> assert 'alarm['id']
    """
    get_alarm = Imc_alarm_ids.query.filter_by(alarm_id=alarm['id']).first()
    get_alarm.userAckType = alarm['userAckType']
    get_alarm.userAckUserName = alarm['userAckUserName']
    db.session.commit()


def get_alarm_status(alarm, auth):
    """
    function takes a mix a variables from snow and IMC to create a local SQL Alchemy db record
    :param alarm: a python dict
    :param snow_return: the return_code from performing a snow post
    >>> from snowbridge import *
    >>> get_alarm_status({alarm}, auth)
    >>> assert 'alarm['id']
    """
    alarm_id = alarm['id']
    alarm_details = get_alarm_details(alarm_id, auth.creds, auth.url)
    if alarm_details['ackStatus'] == '0' and alarm_details['recStatus'] == "0":
        alarm['userAckType'] = "0"
    if alarm_details['ackStatus'] == '1' and alarm_details['recStatus'] == "0":
        alarm['userAckType'] = "1"
    if alarm_details['ackStatus'] == '1' and alarm_details['recStatus'] == "1":
        alarm['userAckType'] = "7"

    return alarm['userAckType']
